import os
from shutil import move
from time import sleep
from datetime import datetime
import json
import webbrowser as web
from PIL import Image
import base64


def problems_and_features():
    """
    - still cannot run in background
    - move log does not work
    -
    """


def main():

    def show_how_to_get_sorter_path():
        b64_str_img = b''
        image_file_name = "how to get sorter path.jpg"
        if not os.path.exists(image_file_name):
            with open(image_file_name, 'wb') as wf:
                wf.write(base64.b64decode(b64_str_img))
        with Image.open(image_file_name) as image:
            image.show()

    # show read me first
    readme_name = 'FileSorter - README.txt'
    readme = f'- The folder path "sorter path" is scanned once every 5 seconds for new \n' \
             f'files and sort them into ' \
             f'their folders based on their extensions\n' \
             f'- You can change how frequently the program checks and files to be ignored in config.json\n' \
             f'- See move log for move history\n\n' \
             f'IMPORTANT\n' \
             f'\tYou should not create new file in this sorter folder, ' \
             f'because it will be renamed and moved automatically.\n' \
             f'\tIn other word, sorter path folder is suggested to be used as a download folder.\n\n' \
             f'\tAnother useful case, you can use this program to sort other folders by removing "config.json"\n' \
             f'\tlocated in the same folder as the program. After that rerun the program and it will ask you for ' \
             f'new sorter path.'
    if not os.path.exists(readme_name):
        with open(readme_name, 'w') as f:
            f.write(readme)
        web.open(readme_name)

    # check all needed files and read them. If sorter path exists, break.
    while True:
        # create config, if not found
        config = 'FileSorter - config.json'
        if not os.path.exists(config):
            all_config = {
                'sorter path': None, 'period': 5, 'ignore': ['example.txt']
            }
            show_how_to_get_sorter_path()
            with open(config, 'w') as f:
                # get sorter path
                while True:
                    path = input("Enter folder path which will be used as sorter\n"
                                 "sorter path = ").strip().strip('"')
                    if os.path.exists(path):
                        all_config['sorter path'] = path
                        json.dump(all_config, f, indent=4)
                        break
                    else:
                        print(f'cannot find path "{path}"\n'
                              f'For example, if you have a folder named "Sorter" in Drive D:, the path is '
                              f'"D:\Sorter"\n')

        # read config
        move_log = 'FileSorter - move log.txt'
        ignore = [move_log, readme_name]
        ignore_extension = [
            '.!ut', '.adadownload', '.bc', '.bc!', '.blf', '.cache', '.crdownload', '.dmp', '.download', '.download',
            '.download', '.part', '.partial', '.temp', '.tmp'
        ]
        with open(config, 'r') as f:
            try:
                data = json.load(f)
                sorter_path = data['sorter path']
                check_period = data['period']
                ignore.append(data['ignore'])
                print(f'Sorter path = "{sorter_path}"')
                if not os.path.exists(sorter_path):
                    print(f'cannot find the folder path specified in {config}')
                    show_how_to_get_sorter_path()
                    os.remove(config)
                else:
                    break
            except:
                print('Invalid config, recreating it...')
                f.close()
                os.remove(config)

    # main program
    os.chdir(sorter_path)
    sorter_path_exists = os.path.exists(sorter_path)
    while sorter_path_exists:
        in_sorter = os.listdir()
        in_sorter = [name for name in in_sorter if name not in ignore]
        now_str = datetime.now().strftime("%H:%M:%S %d/%m/%y")
        print(f'{now_str} in Sorter: {", ".join(reversed(in_sorter))}')

        # check for move log and readme. if not found, create.
        for each in ignore:
            if each not in in_sorter:
                if each in ignore[:2]:
                    with open(each, 'w') as f:
                        if each == readme_name:
                            f.write(readme)

        for name in in_sorter:
            try:
                file_name, extension = os.path.splitext(name)
                if not in_sorter:
                    break
                if not os.path.isdir(name) and os.path.isfile(name) \
                        and name not in ignore and extension not in ignore_extension:
                    if not os.path.exists(f'{extension}'):
                        os.makedirs(extension)
                        print(f'folder "{extension}" has been created.')

                    old_name_file_path = os.path.join(sorter_path, name)
                    file_name_datetime = datetime.now().strftime('%H%M%S %d%m%Y')
                    new_name = f'{file_name} {file_name_datetime}{extension}'
                    new_name_file_path = os.path.join(sorter_path, new_name)
                    os.rename(old_name_file_path, new_name_file_path)
                    dir_name = extension
                    dir_path = os.path.join(sorter_path, dir_name)
                    move(new_name_file_path, dir_path)
                    with open(move_log, 'a') as f:
                        f.write(f'{now_str} \nrenamed "{name}" with "{new_name}" and moved to {dir_path}\n')

            except:
                pass

        sleep(check_period)
        sorter_path_exists = os.path.exists(sorter_path)

    print('Sorter path does not exist.')
    input('Enter to close ')


if __name__ == '__main__':
    main()
